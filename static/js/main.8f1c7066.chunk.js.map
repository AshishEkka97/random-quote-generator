{"version":3,"sources":["QuoteMachine.js","App.js","serviceWorker.js","index.js"],"names":["QuoteMachine","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","END_POINT","COLORS","state","quote","text","author","hasQuote","color","getRandomQuote","bind","assertThisInitialized","event","_this2","fetch","then","response","json","data","console","log","quoteText","quoteAuthor","setState","Math","floor","random","length","_this$state$quote","react_default","a","createElement","react","style","paddingTop","Row","paddimg","margin","Col","sm","Card","id","CardBody","CardTitle","fontSize","CardText","CardFooter","Button","outline","onClick","marginRight","href","encodeURIComponent","marginLeft","backgroundColor","height","renderQuote","Spinner","type","width","position","top","left","Component","App","className","src_QuoteMachine","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8f1c7066.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport {Row, Col, Card, CardBody, CardTitle, CardText, CardFooter, Button, Spinner } from 'reactstrap';\r\n\r\nclass QuoteMachine extends Component {\r\n  constructor() {\r\n    super();\r\n    this.END_POINT = 'https://quota.glitch.me/random';\r\n    this.COLORS = ['#16a085', '#27ae60', '#2c3e50', '#f39c12', '#e74c3c', '#9b59b6', '#FB6964', '#342224', \"#472E32\", \"#BDBB99\", \"#77B1A9\", \"#73A857\"];\r\n    this.state = {\r\n      quote: {\r\n        text: '',\r\n        author: ''\r\n      },\r\n      hasQuote: false,\r\n      color: 'white'\r\n    }\r\n\r\n    this.getRandomQuote = this.getRandomQuote.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getRandomQuote();\r\n  }\r\n\r\n  getRandomQuote(event) {\r\n    fetch(this.END_POINT)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      console.log(data);\r\n      if (data.quoteText) {\r\n        let {quote} = this.state;\r\n        quote.text = data.quoteText;\r\n        quote.author = data.quoteAuthor;\r\n        this.setState({ quote, color: Math.floor(Math.random() * this.COLORS.length) }, () => {\r\n          if (this.state.hasQuote === false) {\r\n            this.setState({hasQuote: true})\r\n          }\r\n        })\r\n        console.log(this.state.color)\r\n      }\r\n      else {\r\n        console.log('Error 404! Quote not found')\r\n      }\r\n    })\r\n  }\r\n\r\n  renderQuote() {\r\n    const {text, author} = this.state.quote;\r\n    return (\r\n      <Fragment>\r\n        <h1 style={{color: 'white', paddingTop: \"30vh\"}}>Random Quote Generator</h1>\r\n        <Row style={{paddimg: 0, margin: 0}}>\r\n          <Col sm='4'>\r\n          </Col>\r\n          <Col sm='4'>\r\n            <Card id=\"quote-box\">\r\n              <CardBody>\r\n                <CardTitle id=\"text\" style={{fontSize: 25, color: this.COLORS[this.state.color]}}>{text}</CardTitle>\r\n                <CardText id=\"author\" style={{color: this.COLORS[this.state.color]}}>- {author}</CardText>\r\n              </CardBody>\r\n              <CardFooter>\r\n                <Button\r\n                  outline\r\n                  color=\"primary\"\r\n                  onClick={this.getRandomQuote}\r\n                  id='new-quote'\r\n                  style={{marginRight: 5}}\r\n                >\r\n                  New Quote!\r\n                </Button>\r\n                <a href={ 'https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=' + encodeURIComponent('\"' + this.state.quote.text + '\" -' + this.state.quote.author) } id='tweet-quote'>\r\n                  <Button\r\n                    outline\r\n                    style={{marginLeft: 5}}\r\n                  >\r\n                    Tweet This!\r\n                  </Button>\r\n                </a>\r\n              </CardFooter>\r\n            </Card>\r\n          </Col>\r\n          <Col sm='4'>\r\n          </Col>\r\n        </Row>\r\n      </Fragment>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div style={{backgroundColor: this.COLORS[this.state.color], height: \"100vh\"}}>\r\n        { this.state.hasQuote === true ? this.renderQuote() : <Spinner type=\"grow\" color=\"primary\" style={{ width: '3rem', height: '3rem', position: \"fixed\", top: \"50%\",left: \"50%\"}} /> }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default QuoteMachine;","import React, { Component } from 'react';\nimport './App.css';\nimport QuoteMachine from './QuoteMachine';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <QuoteMachine />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}